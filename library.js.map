{"version":3,"file":"library.js","sources":["../src/js/library.js"],"sourcesContent":["import TmdbApi from './tmdb-api';\nimport LocalMovieManager from './local-movie-manager';\nimport openMovieInfoModal from './modal-window';\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n  const movieListElement = document.querySelector('.my-library-movie-list');\n  const loadMoreButton = document.querySelector('.my-library-button.load');\n  const sorryMessage = document.querySelector('.my-library-sorry');\n  const mainSection = document.querySelector('.my-library-main-section');\n  const genreSelect = document.querySelector('#genre');\n  const searchButton = document.querySelector('#my-library-button-search');\n  const lmm = new LocalMovieManager('myLibrary');\n  const tmdb = new TmdbApi();\n  const loaderLibrary = document.getElementById('loader-library');\n\n  let currentDisplayCount = 0;\n  const batchSize = 12;\n  const genreMap = new Map();\n\n  async function fetchGenres() {\n    try {\n      const genres = await tmdb.getMovieGenres();\n      genres.forEach(genre => {\n        if (genre.id && genre.name) {\n          genreMap.set(genre.id, genre.name);\n        }\n      });\n      populateGenreSelect();\n    } catch (error) {\n      console.error('Error fetching genres:', error);\n    }\n  }\n\n  function populateGenreSelect() {\n    if (!genreSelect.querySelector('option[value=\"\"]')) {\n      const defaultOption = document.createElement('option');\n      defaultOption.value = '';\n      defaultOption.textContent = 'Genre';\n      defaultOption.disabled = true;\n      defaultOption.selected = true;\n      genreSelect.appendChild(defaultOption);\n    }\n\n    genreMap.forEach((name, id) => {\n      const option = document.createElement('option');\n      option.value = id;\n      option.textContent = name;\n      genreSelect.appendChild(option);\n    });\n  }\n\n  function getDisplayedGenres(movieGenres) {\n    const screenWidth = window.innerWidth;\n    const genresToShow = screenWidth <= 600 ? 1 : 2;\n    return movieGenres\n      .slice(0, genresToShow)\n      .map(id => genreMap.get(id) || 'Unknown')\n      .join(', ');\n  }\n\n  function createStarRating(rating) {\n    const maxStars = 5;\n    const fullStars = Math.floor(rating / 2);\n    const halfStar = rating % 2 >= 1 ? 1 : 0;\n    const emptyStars = maxStars - fullStars - halfStar;\n\n    return [\n      ...Array(fullStars).fill(\n        '<svg class=\"star full\"><use xlink:href=\"#icon-star\"></use></svg>'\n      ),\n      ...Array(halfStar).fill(\n        '<svg class=\"star half\"><use xlink:href=\"#icon-star-half\"></use></svg>'\n      ),\n      ...Array(emptyStars).fill(\n        '<svg class=\"star empty\"><use xlink:href=\"#icon-star-outline\"></use></svg>'\n      ),\n    ].join('');\n  }\n\n  function createMovieListItem(movie) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('my-library-movie-list-item');\n\n    const genreNames = getDisplayedGenres(movie.genre_ids || []);\n    const id = movie.id;\n    const releaseYear = movie.release_date\n      ? new Date(movie.release_date).getFullYear()\n      : 'Unknown';\n    const rating = Math.round(movie.vote_average * 10) / 10;\n    const stars = createStarRating(rating);\n\n    const imageUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n    listItem.style.backgroundImage = `url(${imageUrl})`;\n    listItem.style.backgroundSize = 'cover';\n    listItem.style.backgroundPosition = 'center';\n    listItem.dataset.id = id;\n    listItem.innerHTML = `\n      <div class=\"my-library-gradient\"></div>\n      <div class=\"my-library-movie\">\n        <h2>${movie.title}</h2>\n        <p>${genreNames} | ${releaseYear} <span class=\"stars\">${stars}</span></p>\n      </div>\n    `;\n\n    listItem.addEventListener('click', () => {\n      openMovieInfoModal(movie.id);\n    });\n\n    return listItem;\n  }\n\n  async function fetchMovieDetailsAndAssignGenres(movie) {\n    try {\n      const movieDetails = await tmdb.getMovieDetails(movie.id);\n\n      if (movieDetails && movieDetails.genres) {\n        movie.genre_ids = movieDetails.genres.map(genre => genre.id);\n      }\n      return movieDetails;\n    } catch (error) {\n      console.error(`Failed to fetch details for movie ID ${movie.id}:`, error);\n      return null;\n    }\n  }\n\n  async function ensureGenresForMovies(movies) {\n    for (const movie of movies) {\n      if (!movie.genre_ids) {\n        await fetchMovieDetailsAndAssignGenres(movie);\n      }\n    }\n  }\n\n  async function renderMovieList(genreId = '', reset = true) {\n    const movies = lmm.getMovies();\n\n    if (reset) {\n      currentDisplayCount = 0;\n      movieListElement.innerHTML = '';\n    }\n\n    await ensureGenresForMovies(movies);\n\n    const filteredMovies = genreId\n      ? movies.filter(\n          movie =>\n            movie.genre_ids && movie.genre_ids.includes(parseInt(genreId))\n        )\n      : movies;\n\n    if (filteredMovies.length > 0) {\n      mainSection.style.display = 'block';\n      document.querySelector('.genre-form').style.display = 'block';\n\n      const moviesToDisplay = filteredMovies.slice(\n        currentDisplayCount,\n        currentDisplayCount + batchSize\n      );\n      moviesToDisplay.forEach(movie => {\n        const listItem = createMovieListItem(movie);\n        loaderLibrary.style.display = 'none';\n        movieListElement.appendChild(listItem);\n      });\n\n      currentDisplayCount += batchSize;\n\n      if (currentDisplayCount >= filteredMovies.length) {\n        loadMoreButton.style.display = 'none';\n      } else {\n        loadMoreButton.style.display = 'block';\n      }\n\n      searchButton.style.display = 'none';\n      searchButton.disabled = true;\n    } else {\n      loaderLibrary.style.display = 'none';\n      sorryMessage.style.display = 'block';\n      mainSection.style.display = 'none';\n      document.querySelector('.genre-form').style.display = 'none';\n      loadMoreButton.style.display = 'none';\n\n      searchButton.style.display = 'block';\n      searchButton.disabled = false;\n    }\n\n    document.querySelectorAll('.my-library-movie-list-item').forEach(item => {\n      item.addEventListener('click', event => {\n        const listItem = event.currentTarget;\n        const id = listItem.dataset.id;\n        if (id) {\n          openMovieInfoModal(id);\n        }\n      });\n    });\n  }\n\n  async function updateLibraryView(reset = true) {\n    const loaderLibrary = document.getElementById('loader-library');\n    loaderLibrary.style.display = 'block';\n\n    const movies = lmm.getMovies();\n\n    if (reset & (movies.length === 0)) {\n      loaderLibrary.style.display = 'none';\n      currentDisplayCount = 0;\n      movieListElement.innerHTML = '';\n      sorryMessage.style.display = 'block';\n      loadMoreButton.style.display = 'none';\n      mainSection.style.display = 'none';\n      document.querySelector('.genre-form').style.display = 'none';\n      searchButton.style.display = 'block';\n      searchButton.disabled = false;\n      return;\n    } else {\n      loaderLibrary.style.display = 'none';\n      sorryMessage.style.display = 'none';\n      mainSection.style.display = 'block';\n      document.querySelector('.genre-form').style.display = 'block';\n      searchButton.style.display = 'none';\n      searchButton.disabled = true;\n    }\n\n    await ensureGenresForMovies(movies);\n\n    for (const movie of movies.slice(\n      currentDisplayCount,\n      currentDisplayCount + batchSize\n    )) {\n      const listItem = createMovieListItem(movie);\n      movieListElement.appendChild(listItem);\n    }\n\n    currentDisplayCount += batchSize;\n\n    if (currentDisplayCount >= movies.length) {\n      loadMoreButton.style.display = 'none';\n    } else {\n      loadMoreButton.style.display = 'block';\n    }\n  }\n\n  loadMoreButton.addEventListener('click', () => {\n    loadMoreButton.style.display = 'none';\n    loaderLibrary.style.display = 'block';\n    setTimeout(() => {\n      loaderLibrary.style.display = 'none';\n      updateLibraryView(false);\n    }, 300);\n  });\n\n  genreSelect.addEventListener('change', function () {\n    const selectedGenreId = genreSelect.value;\n    renderMovieList(selectedGenreId);\n  });\n\n  await fetchGenres();\n  updateLibraryView();\n});\n"],"names":["movieListElement","loadMoreButton","sorryMessage","mainSection","genreSelect","searchButton","lmm","LocalMovieManager","tmdb","TmdbApi","loaderLibrary","currentDisplayCount","batchSize","genreMap","fetchGenres","genre","populateGenreSelect","error","defaultOption","name","id","option","getDisplayedGenres","movieGenres","genresToShow","createStarRating","rating","fullStars","halfStar","emptyStars","createMovieListItem","movie","listItem","genreNames","releaseYear","stars","imageUrl","openMovieInfoModal","fetchMovieDetailsAndAssignGenres","movieDetails","ensureGenresForMovies","movies","renderMovieList","genreId","reset","filteredMovies","item","event","updateLibraryView","selectedGenreId"],"mappings":"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"}
{"version":3,"file":"commonHelpers.js","sources":["../src/js/catalog.js"],"sourcesContent":["import TmdbApi from './tmdb-api';\nimport openMovieInfoModal from './modal-window';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const tmdb = new TmdbApi();\n  const catalogCardsContainer = document.querySelector('.catalog-movie-list');\n  const sorryMessage = document.querySelector('.catalog-sorry-message');\n  const input = document.querySelector('.input-text');\n  const searchButton = document.querySelector('.catalog-button');\n  const yearSelect = document.querySelector('.year-select');\n  const xButton = document.querySelector('.x-button');\n  const genreAbbreviations = { 'Science Fiction': 'Sci-Fi' };\n\n  sorryMessage.style.display = 'none';\n\n  const fetchMovies = async (query = '', page = 1) => {\n    try {\n      return query ? (await tmdb.searchMovie(query, page)).slice(0, 18) : (await tmdb.getTrendingMovies('week')).slice(0, 18);\n    } catch (e) { console.error('Error fetching movies:', e); return []; }\n  };\n\n  const fetchGenres = async () => {\n    try { return await tmdb.getMovieGenres(); }\n    catch (e) { console.error('Error fetching genres:', e); return []; }\n  };\n\n  const getGenres = await fetchGenres();\n  const filterByYear = (movies, year) => year ? movies.filter(m => new Date(m.release_date).getFullYear() == year) : movies;\n\n  const starRating = rating => {\n    const fullStars = Math.floor(rating / 2);\n    const halfStar = rating % 2 >= 1 ? 1 : 0;\n    return '<svg class=\"star full\"><use xlink:href=\"#icon-star\"></use></svg>'.repeat(fullStars) +\n           (halfStar ? '<svg class=\"star half\"><use xlink:href=\"#icon-star-half\"></use></svg>' : '') +\n           '<svg class=\"star empty\"><use xlink:href=\"#icon-star-outline\"></use></svg>'.repeat(5 - Math.ceil(rating / 2));\n  };\n\n  const renderMovies = movies => {\n    catalogCardsContainer.innerHTML = '';\n    sorryMessage.style.display = movies.length ? 'none' : 'block';\n\n    movies.forEach(m => {\n      const genres = m.genre_ids.slice(0, 2).map(id => (getGenres.find(g => g.id === id)?.name || 'Unknown')).map(name => genreAbbreviations[name] || name).join(', ');\n      const releaseDate = m.release_date ? new Date(m.release_date).getFullYear() : 'Unknown';\n      const rating = Math.round(m.vote_average * 10) / 10;\n\n      const card = document.createElement('li');\n      card.classList.add('card');\n      card.style.background = `url(https://image.tmdb.org/t/p/w500${m.poster_path}) center/cover`;\n      card.dataset.id = m.id;\n      card.innerHTML = `\n        <div class=\"card-content\">\n          <h2>${m.title}</h2>\n          <p>${genres} | ${releaseDate} <span class=\"stars\">${starRating(rating)}</span></p>\n        </div>\n      `;\n      card.addEventListener('click', () => openMovieInfoModal(m.id));\n      catalogCardsContainer.appendChild(card);\n    });\n  };\n\n  const handleSearch = async () => renderMovies(filterByYear(await fetchMovies(input.value.trim()), yearSelect.value));\n\n  searchButton.addEventListener('click', handleSearch);\n  yearSelect.addEventListener('change', handleSearch);\n  xButton.addEventListener('click', () => input.value = '');\n  input.addEventListener('input', () => xButton.style.visibility = input.value.trim() ? 'visible' : 'hidden');\n\n  renderMovies(await fetchMovies());\n});\n"],"names":["tmdb","TmdbApi","catalogCardsContainer","sorryMessage","input","searchButton","yearSelect","xButton","genreAbbreviations","fetchMovies","query","page","e","getGenres","filterByYear","movies","year","m","starRating","rating","fullStars","halfStar","renderMovies","genres","id","_a","g","name","releaseDate","card","openMovieInfoModal","handleSearch"],"mappings":"yFAGA,SAAS,iBAAiB,mBAAoB,SAAY,CACxD,MAAMA,EAAO,IAAIC,EACXC,EAAwB,SAAS,cAAc,qBAAqB,EACpEC,EAAe,SAAS,cAAc,wBAAwB,EAC9DC,EAAQ,SAAS,cAAc,aAAa,EAC5CC,EAAe,SAAS,cAAc,iBAAiB,EACvDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAU,SAAS,cAAc,WAAW,EAC5CC,EAAqB,CAAE,kBAAmB,UAEhDL,EAAa,MAAM,QAAU,OAE7B,MAAMM,EAAc,MAAOC,EAAQ,GAAIC,EAAO,IAAM,CAClD,GAAI,CACF,OAAOD,GAAS,MAAMV,EAAK,YAAYU,EAAOC,CAAI,GAAG,MAAM,EAAG,EAAE,GAAK,MAAMX,EAAK,kBAAkB,MAAM,GAAG,MAAM,EAAG,EAAE,CAC5H,OAAaY,EAAG,CAAE,eAAQ,MAAM,yBAA0BA,CAAC,EAAU,CAAA,CAAK,CAC1E,EAOQC,EAAY,MALE,SAAY,CAC9B,GAAI,CAAE,OAAO,MAAMb,EAAK,eAAgB,CAAG,OACpCY,EAAG,CAAE,eAAQ,MAAM,yBAA0BA,CAAC,EAAU,CAAA,CAAK,CACxE,KAGQE,EAAe,CAACC,EAAQC,IAASA,EAAOD,EAAO,OAAOE,GAAK,IAAI,KAAKA,EAAE,YAAY,EAAE,YAAW,GAAMD,CAAI,EAAID,EAE7GG,EAAaC,GAAU,CAC3B,MAAMC,EAAY,KAAK,MAAMD,EAAS,CAAC,EACjCE,EAAWF,EAAS,GAAK,EAAI,EAAI,EACvC,MAAO,mEAAmE,OAAOC,CAAS,GAClFC,EAAW,wEAA0E,IACtF,4EAA4E,OAAO,EAAI,KAAK,KAAKF,EAAS,CAAC,CAAC,CACvH,EAEQG,EAAeP,GAAU,CAC7Bb,EAAsB,UAAY,GAClCC,EAAa,MAAM,QAAUY,EAAO,OAAS,OAAS,QAEtDA,EAAO,QAAQE,GAAK,CAClB,MAAMM,EAASN,EAAE,UAAU,MAAM,EAAG,CAAC,EAAE,IAAIO,GAAO,OAAA,QAAAC,EAAAZ,EAAU,KAAKa,GAAKA,EAAE,KAAOF,CAAE,IAA/B,YAAAC,EAAkC,OAAQ,UAAU,EAAE,IAAIE,GAAQnB,EAAmBmB,CAAI,GAAKA,CAAI,EAAE,KAAK,IAAI,EACzJC,EAAcX,EAAE,aAAe,IAAI,KAAKA,EAAE,YAAY,EAAE,YAAa,EAAG,UACxEE,EAAS,KAAK,MAAMF,EAAE,aAAe,EAAE,EAAI,GAE3CY,EAAO,SAAS,cAAc,IAAI,EACxCA,EAAK,UAAU,IAAI,MAAM,EACzBA,EAAK,MAAM,WAAa,sCAAsCZ,EAAE,WAAW,iBAC3EY,EAAK,QAAQ,GAAKZ,EAAE,GACpBY,EAAK,UAAY;AAAA;AAAA,gBAEPZ,EAAE,KAAK;AAAA,eACRM,CAAM,MAAMK,CAAW,wBAAwBV,EAAWC,CAAM,CAAC;AAAA;AAAA,QAG1EU,EAAK,iBAAiB,QAAS,IAAMC,EAAmBb,EAAE,EAAE,CAAC,EAC7Df,EAAsB,YAAY2B,CAAI,CAC5C,CAAK,CACL,EAEQE,EAAe,SAAYT,EAAaR,EAAa,MAAML,EAAYL,EAAM,MAAM,KAAI,CAAE,EAAGE,EAAW,KAAK,CAAC,EAEnHD,EAAa,iBAAiB,QAAS0B,CAAY,EACnDzB,EAAW,iBAAiB,SAAUyB,CAAY,EAClDxB,EAAQ,iBAAiB,QAAS,IAAMH,EAAM,MAAQ,EAAE,EACxDA,EAAM,iBAAiB,QAAS,IAAMG,EAAQ,MAAM,WAAaH,EAAM,MAAM,KAAI,EAAK,UAAY,QAAQ,EAE1GkB,EAAa,MAAMb,EAAW,CAAE,CAClC,CAAC"}